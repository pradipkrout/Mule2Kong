{
  "openapi": "3.0.0",
  "info": {
    "title": "Petstore",
    "version": "1.0.6"
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2"
    },
    {
      "url": "https://petstore.swagger.io/v2"
    }
  ],
  "paths": {
    "/pet": {
      "put": {
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "description": "Update an existing pet",
        "operationId": "updatePet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "body",
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "description": "Add a new pet to the store",
        "operationId": "addPet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "body",
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "title": "response200",
                  "xml": {
                    "attribute": false,
                    "wrapped": false
                  },
                  "type": "array",
                  "items": {
                    "xml": {
                      "name": "Pet"
                    },
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": true,
            "description": "Status values that need to be considered for filter",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "available",
                  "pending",
                  "sold"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/pet/findByTags": {
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "title": "response200",
                  "xml": {
                    "attribute": false,
                    "wrapped": false
                  },
                  "type": "array",
                  "items": {
                    "xml": {
                      "name": "Pet"
                    },
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": true,
            "description": "Tags to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/pet/{petId}": {
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "description": "Updates a pet in the store with form data",
        "operationId": "updatePetWithForm",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "title": "name",
                    "description": "Updated name of the pet",
                    "type": "string"
                  },
                  "status": {
                    "title": "status",
                    "description": "Updated status of the pet",
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "application/x-www-form-urlencoded"
              ],
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "description": "Deletes a pet",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "petId",
          "in": "path",
          "required": true,
          "schema": {
            "format": "int64",
            "type": "integer"
          },
          "description": "ID of pet to return"
        }
      ]
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "description": "uploads an image",
        "operationId": "uploadFile",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "additionalMetadata": {
                    "title": "additionalMetadata",
                    "description": "Additional data to pass to server",
                    "type": "string"
                  },
                  "file": {
                    "title": "file",
                    "description": "file to upload",
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        }
      },
      "parameters": [
        {
          "name": "petId",
          "in": "path",
          "required": true,
          "schema": {
            "format": "int64",
            "type": "integer"
          },
          "description": "ID of pet to return"
        }
      ]
    },
    "/user": {
      "post": {
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "body",
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/user/createWithArray": {
      "post": {
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "body",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/user/createWithList": {
      "post": {
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "body",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/user/{username}": {
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "description": "Get user by user name",
        "operationId": "getUserByName"
      },
      "put": {
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "body",
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser"
      },
      "parameters": [
        {
          "name": "username",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The name that needs to be fetched. Use user1 for testing."
        }
      ]
    },
    "/user/login": {
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "displayName": "X-Rate-Limit",
                "schema": {
                  "type": "string"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "displayName": "X-Expires-After",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/xml": {
                "schema": {
                  "title": "response200",
                  "xml": {
                    "attribute": false,
                    "wrapped": false,
                    "name": "response200"
                  },
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        },
        "description": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "description": "The user name for login",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "description": "The password for login in clear text",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/user/logout": {
      "get": {
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "description": "Logs out current logged in user session",
        "operationId": "logoutUser"
      }
    },
    "/store/order": {
      "post": {
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        },
        "description": "Place an order for a pet",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "body",
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": {
              "enum": [
                "application/json"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById"
      },
      "delete": {
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder"
      },
      "parameters": [
        {
          "name": "orderId",
          "in": "path",
          "required": true,
          "schema": {
            "minimum": 1,
            "maximum": 10,
            "format": "int64",
            "type": "integer"
          },
          "description": "ID of pet that needs to be fetched"
        }
      ]
    },
    "/store/inventory": {
      "get": {
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "response200",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "type": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            }
          }
        },
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ApiResponse": {
        "title": "ApiResponse",
        "type": "object",
        "properties": {
          "code": {
            "title": "code",
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "title": "type",
            "type": "string"
          },
          "message": {
            "title": "message",
            "type": "string"
          }
        }
      },
      "Category": {
        "title": "Category",
        "xml": {
          "name": "Category"
        },
        "type": "object",
        "properties": {
          "id": {
            "title": "id",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "title": "name",
            "type": "string"
          }
        }
      },
      "Pet": {
        "title": "Pet",
        "xml": {
          "name": "Pet"
        },
        "type": "object",
        "properties": {
          "id": {
            "title": "id",
            "format": "int64",
            "type": "integer"
          },
          "category": {
            "title": "category",
            "xml": {
              "attribute": false,
              "wrapped": false,
              "name": "Category"
            },
            "$ref": "#/components/schemas/Category"
          },
          "name": {
            "title": "name",
            "type": "string"
          },
          "photoUrls": {
            "title": "photoUrls",
            "xml": {
              "attribute": false,
              "wrapped": true
            },
            "type": "array",
            "items": {
              "xml": {
                "name": "photoUrl"
              },
              "type": "string"
            }
          },
          "tags": {
            "title": "tags",
            "xml": {
              "attribute": false,
              "wrapped": true
            },
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "title": "status",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "photoUrls"
        ]
      },
      "Tag": {
        "title": "Tag",
        "xml": {
          "name": "Tag"
        },
        "type": "object",
        "properties": {
          "id": {
            "title": "id",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "title": "name",
            "type": "string"
          }
        }
      },
      "Order": {
        "title": "Order",
        "xml": {
          "name": "Order"
        },
        "type": "object",
        "properties": {
          "id": {
            "title": "id",
            "format": "int64",
            "type": "integer"
          },
          "petId": {
            "title": "petId",
            "format": "int64",
            "type": "integer"
          },
          "quantity": {
            "title": "quantity",
            "format": "int32",
            "type": "integer"
          },
          "shipDate": {
            "title": "shipDate",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "title": "status",
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ],
            "type": "string"
          },
          "complete": {
            "title": "complete",
            "type": "boolean"
          }
        }
      },
      "User": {
        "title": "User",
        "xml": {
          "name": "User"
        },
        "type": "object",
        "properties": {
          "id": {
            "title": "id",
            "format": "int64",
            "type": "integer"
          },
          "username": {
            "title": "username",
            "type": "string"
          },
          "firstName": {
            "title": "firstName",
            "type": "string"
          },
          "lastName": {
            "title": "lastName",
            "type": "string"
          },
          "email": {
            "title": "email",
            "type": "string"
          },
          "password": {
            "title": "password",
            "type": "string"
          },
          "phone": {
            "title": "phone",
            "type": "string"
          },
          "userStatus": {
            "title": "userStatus",
            "format": "int32",
            "description": "User Status",
            "type": "integer"
          }
        }
      }
    },
    "responses": {},
    "parameters": {},
    "examples": {},
    "requestBodies": {},
    "headers": {},
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api_key"
      }
    },
    "links": {},
    "callbacks": {}
  }
}
